{"version":3,"sources":["fetchData.js","Chart/index.js","Sidebar/index.js","App.js","serviceWorker.js","index.js"],"names":["dataUrl","fetchData","a","fetch","response","text","split","map","s","head","tail","rows","row","_","zipObject","filters","key","values","uniq","r","Chart","filter","filteredRows","Object","keys","every","filterValues","length","includes","width","height","data","dataKey","yAxisId","angle","position","orientation","type","stroke","Sidebar","setFilter","Segment","Header","Dropdown","placeholder","fluid","multiple","search","selection","onChange","e","value","options","App","useState","setData","Datasource","Campaign","useEffect","console","error","Grid","celled","container","columns","stackable","Row","Column","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca25c7f9.chunk.js","sourcesContent":["import _ from 'lodash';\n\nconst dataUrl = 'http://adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv';\n\nexport default async function fetchData(): {\n  rows: [{\n    Date: string,\n    Datasource: string,\n    Campaign: string,\n    Clicks: string,\n    Impressions: string,\n  }],\n  filters: [{\n    key: string,\n    values: [string],\n  }],\n} {\n  const response = await fetch(dataUrl);\n  const text = await response.text();\n  const [head, ...tail] = text.split('\\n').map(s => s.split(','));\n  const rows = tail.map(row => _.zipObject(head, row));\n  const filters = ['Datasource', 'Campaign'].map((key) => ({\n    key,\n    values: _.uniq(rows.map(r => r[key])),\n  }));\n  return { rows, filters };\n}\n","import React from 'react';\nimport {\n  Label,\n  Legend,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nconst Chart = ({\n  filter,\n  rows,\n}) => {\n  const filteredRows = rows.filter(row => Object.keys(filter).every((key) => {\n    const filterValues = filter[key];\n    return !filterValues.length || filterValues.includes(row[key])\n  }));\n\n  return (\n    <LineChart width={800} height={400} data={filteredRows}>\n      <XAxis dataKey=\"Date\" />\n      <YAxis yAxisId=\"clicks\">\n        <Label angle={-90} position=\"insideLeft\">Clicks</Label>\n      </YAxis>\n      <YAxis yAxisId=\"impressions\" orientation=\"right\">\n        <Label angle={90} position=\"insideRight\">Impressions</Label>\n      </YAxis>\n      <Tooltip />\n      <Legend />\n      <Line yAxisId=\"clicks\" type=\"monotone\" dataKey=\"Clicks\" stroke=\"blue\" />\n      <Line yAxisId=\"impressions\" type=\"monotone\" dataKey=\"Impressions\" stroke=\"green\" />\n    </LineChart>\n  );\n}\n\nexport default Chart;\n","import React from 'react';\nimport {\n  Dropdown,\n  Header,\n  Segment,\n} from 'semantic-ui-react';\n\nconst Sidebar = ({\n  filters,\n  filter,\n  setFilter\n}) => (\n  <>\n    {filters.map(({ key, values }) => (\n      <Segment key={key}>\n        <Header>{key}</Header>\n        <Dropdown\n          placeholder='State'\n          fluid\n          multiple\n          search\n          selection\n          onChange={(e, { value }) => setFilter({ ...filter, [key]: value })}\n          options={values.map(value => ({ key: value, value, text: value }))}\n          value={filter[key]}\n        />\n      </Segment>\n    ))}\n  </>\n);\n\nexport default Sidebar;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Grid,\n  Segment,\n} from 'semantic-ui-react';\n\nimport fetchData from './fetchData';\nimport Chart from './Chart';\nimport Sidebar from './Sidebar';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nfunction App() {\n  const [data, setData] = useState({});\n  const [filter, setFilter] = useState({\n    Datasource: ['Facebook Ads'],\n    Campaign: ['Like Ads'],\n  });\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setData(await fetchData());\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  if (!data.rows) {\n    return null;\n  }\n\n  return (\n    <Grid celled container columns={2} stackable>\n      <Grid.Row columns={1}>\n        <Grid.Column>\n          <Segment>Content</Segment>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row columns={2}>\n        <Grid.Column width={4}>\n          <Sidebar\n            filters={data.filters}\n            {...{ filter, setFilter }}\n          />\n        </Grid.Column>\n        <Grid.Column width={12}>\n          <Segment>\n            <Chart\n              rows={data.rows}\n              {...{ filter }}\n            />\n          </Segment>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}