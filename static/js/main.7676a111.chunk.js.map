{"version":3,"sources":["parseData.js","Chart/index.js","Sidebar/index.js","App.js","serviceWorker.js","index.js"],"names":["DataModel","rows","filterKeys","this","_rows","_filterKeys","filter","row","Object","keys","every","key","filterValues","length","includes","filteredRows","getRows","_","fromPairs","map","uniq","r","parseData","json","split","s","head","obj","zipObject","date","DateTime","fromFormat","toFormat","datasource","campaign","clicks","Number","impressions","Chart","model","width","height","data","dataKey","yAxisId","angle","position","orientation","type","stroke","Sidebar","setFilter","entries","getFilters","values","Segment","Header","as","Dropdown","placeholder","fluid","multiple","search","selection","onChange","e","value","options","text","dataUrl","App","useState","setModel","error","setError","useEffect","a","timeout","fetch","response","console","Grid","celled","container","columns","stackable","Dimmer","active","inverted","Loader","Icon","name","size","color","Message","String","Row","Column","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6XAGMA,E,WACJ,WAAYC,EAAWC,GAAyB,oBAC9CC,KAAKC,MAAQH,EACbE,KAAKE,YAAcH,E,sDAMgC,IAA7CI,EAA4C,uDAAT,GACzC,OAAOH,KAAKC,MAAME,QAAO,SAAAC,GAAG,OAAIC,OAAOC,KAAKH,GAAQI,OAAM,SAACC,GACzD,IAAMC,EAAeN,EAAOK,GAC5B,OAAQC,EAAaC,QAAUD,EAAaE,SAASP,EAAII,Y,mCAIgB,IAAlEL,EAAiE,uDAA9B,GACtCS,EAAeZ,KAAKa,QAAQV,GAClC,OAAOW,IAAEC,UAAUf,KAAKE,YAAYc,KAAI,SAAAR,GAAG,MAAI,CAC7CA,EACAM,IAAEG,KAAKL,EAAaI,KAAI,SAAAE,GAAC,OAAIA,EAAEV,gB,KAatB,SAASW,EAAUC,GAA+B,IAAD,EACtCA,EAAKC,MAAM,MAAML,KAAI,SAAAM,GAAC,OAAIA,EAAED,MAAM,QADI,iBACvDE,EADuD,KAExDzB,EAFwD,WAE5CkB,KAAI,SAACZ,GACrB,IAAMoB,EAAMV,IAAEW,UAAUF,EAAMnB,GAC9B,MAAO,CACLsB,KAAMC,WAASC,WAAWJ,EAAG,KAAU,cAAcK,SAAS,cAC9DC,WAAYN,EAAG,WACfO,SAAUP,EAAG,SACbQ,OAAQC,OAAOT,EAAG,QAClBU,YAAaD,OAAOT,EAAG,iBAG3B,OAAO,IAAI3B,EAAUC,EAAM,CAAC,aAAc,a,YChB7BqC,EArBD,SAAC,GAGR,IAFLC,EAEI,EAFJA,MACAjC,EACI,EADJA,OAEA,OACE,kBAAC,IAAD,CAAWkC,MAAO,IAAKC,OAAQ,IAAKC,KAAMH,EAAMvB,QAAQV,IACtD,kBAAC,IAAD,CAAOqC,QAAQ,SACf,kBAAC,IAAD,CAAOC,QAAQ,UACb,kBAAC,IAAD,CAAOC,OAAQ,GAAIC,SAAS,cAA5B,WAEF,kBAAC,IAAD,CAAOF,QAAQ,cAAcG,YAAY,SACvC,kBAAC,IAAD,CAAOF,MAAO,GAAIC,SAAS,eAA3B,gBAEF,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMF,QAAQ,SAASI,KAAK,WAAWL,QAAQ,SAASM,OAAO,SAC/D,kBAAC,IAAD,CAAML,QAAQ,cAAcI,KAAK,WAAWL,QAAQ,cAAcM,OAAO,Y,gPCpB/E,IAwBeC,EAxBC,SAAC,GAAD,IACdX,EADc,EACdA,MACAjC,EAFc,EAEdA,OACA6C,EAHc,EAGdA,UAHc,OAKd,oCACG3C,OAAO4C,QAAQb,EAAMc,WAAW/C,IAASa,KAAI,mCAAER,EAAF,KAAO2C,EAAP,YAC5C,kBAACC,EAAA,EAAD,CAAS5C,IAAKA,GACZ,kBAAC6C,EAAA,EAAD,CAAQC,GAAG,MAAM9C,GACjB,kBAAC+C,EAAA,EAAD,CACEC,YAAY,QACZC,OAAK,EACLC,UAAQ,EACRC,QAAM,EACNC,WAAS,EACTC,SAAU,SAACC,EAAD,OAAMC,EAAN,EAAMA,MAAN,OAAkBf,E,yVAAU,CAAD,GAAM7C,EAAN,eAAeK,EAAMuD,MAC1DC,QAASb,EAAOnC,KAAI,SAAA+C,GAAK,MAAK,CAAEvD,IAAKuD,EAAOA,QAAOE,KAAMF,MACzDA,MAAO5D,EAAOK,WCNlB0D,G,OAAU,sFA2DDC,MAzDf,WAAgB,IAAD,EACaC,qBADb,mBACNhC,EADM,KACCiC,EADD,OAEaD,qBAFb,mBAENE,EAFM,KAECC,EAFD,OAGeH,mBAAS,CACnCtC,WAAY,CAAC,gBACbC,SAAU,CAAC,cALA,mBAGN5B,EAHM,KAGE6C,EAHF,KAqBb,OAbAwB,qBAAU,WACR,sBAAC,8BAAAC,EAAA,+EAE0BC,kBAAQC,MAAMT,GAAU,KAFlD,cAESU,EAFT,gBAGsBA,EAASX,OAH/B,OAGSA,EAHT,OAIGI,EAASlD,EAAU8C,IAJtB,kDAMGM,EAAS,EAAD,IACRM,QAAQP,MAAR,MAPH,yDAAD,KAUC,IAGD,kBAACQ,EAAA,EAAD,CAAMC,QAAM,EAACC,WAAS,EAACC,QAAS,EAAGC,WAAS,GAC1C,kBAACC,EAAA,EAAD,CAAQC,QAAShD,IAAUkC,EAAOe,UAAQ,GACxC,kBAACC,EAAA,EAAD,iBAEF,kBAACH,EAAA,EAAD,CAAQC,SAAUd,GAChB,kBAACiB,EAAA,EAAD,CAAMC,KAAK,MAAMC,KAAK,MAAMC,MAAM,QAClC,kBAACC,EAAA,EAAD,KAAUC,OAAOtB,KAEnB,kBAACQ,EAAA,EAAKe,IAAN,CAAUZ,QAAS,GACjB,kBAACH,EAAA,EAAKgB,OAAN,KACE,kBAACzC,EAAA,EAAD,CAAQC,GAAG,MAAX,0BAGJ,kBAACwB,EAAA,EAAKe,IAAN,CAAUZ,QAAS,GACjB,kBAACH,EAAA,EAAKgB,OAAN,CAAazD,MAAO,GACjBD,GACC,kBAAC,EACK,CAAEA,QAAOjC,SAAQ6C,eAI3B,kBAAC8B,EAAA,EAAKgB,OAAN,CAAazD,MAAO,IAClB,kBAACe,EAAA,EAAD,KACGhB,GACC,kBAAC,EACK,CAAEA,QAAOjC,gBCvDT4F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7676a111.chunk.js","sourcesContent":["import _ from 'lodash';\nimport { DateTime } from 'luxon';\n\nclass DataModel<R> {\n  constructor(rows: R[], filterKeys: $Keys<R>[]) {\n    this._rows = rows;\n    this._filterKeys = filterKeys;\n  }\n\n  _rows: R[];\n  _filterKeys: $Keys<R>[];\n\n  getRows(filter: { [$Keys<R>]: [string] } = {}): R[] {\n    return this._rows.filter(row => Object.keys(filter).every((key) => {\n      const filterValues = filter[key];\n      return !filterValues.length || filterValues.includes(row[key])\n    }));\n  }\n\n  getFilters(filter: { [$Keys<R>]: [string] } = {}): { [$Keys<R>]: [string] } {\n    const filteredRows = this.getRows(filter);\n    return _.fromPairs(this._filterKeys.map(key => [\n      key,\n      _.uniq(filteredRows.map(r => r[key])),\n    ]));\n  }\n}\n\ntype Row = {\n  date: Date,\n  datasource: string,\n  campaign: string,\n  clicks: number,\n  impressions: number,\n};\n\nexport default function parseData(json: string): DataModel<Row> {\n  const [head, ...tail] = json.split('\\n').map(s => s.split(','));\n  const rows = tail.map((row) => {\n    const obj = _.zipObject(head, row);\n    return {\n      date: DateTime.fromFormat(obj['Date'], 'dd.MM.yyyy').toFormat('yyyy-MM-dd'),\n      datasource: obj['Datasource'],\n      campaign: obj['Campaign'],\n      clicks: Number(obj['Clicks']),\n      impressions: Number(obj['Impressions']),\n    }\n  });\n  return new DataModel(rows, ['datasource', 'campaign']);\n}\n","import React from 'react';\nimport {\n  Label,\n  Legend,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nconst Chart = ({\n  model,\n  filter,\n}) => {\n  return (\n    <LineChart width={800} height={400} data={model.getRows(filter)}>\n      <XAxis dataKey=\"date\" />\n      <YAxis yAxisId=\"clicks\">\n        <Label angle={-90} position=\"insideLeft\">Clicks</Label>\n      </YAxis>\n      <YAxis yAxisId=\"impressions\" orientation=\"right\">\n        <Label angle={90} position=\"insideRight\">Impressions</Label>\n      </YAxis>\n      <Tooltip />\n      <Legend />\n      <Line yAxisId=\"clicks\" type=\"monotone\" dataKey=\"clicks\" stroke=\"blue\" />\n      <Line yAxisId=\"impressions\" type=\"monotone\" dataKey=\"impressions\" stroke=\"green\" />\n    </LineChart>\n  );\n}\n\nexport default Chart;\n","import React from 'react';\nimport {\n  Dropdown,\n  Header,\n  Segment,\n} from 'semantic-ui-react';\n\nconst Sidebar = ({\n  model,\n  filter,\n  setFilter\n}) => (\n  <>\n    {Object.entries(model.getFilters(filter)).map(([key, values]) => (\n      <Segment key={key}>\n        <Header as=\"h5\">{key}</Header>\n        <Dropdown\n          placeholder='State'\n          fluid\n          multiple\n          search\n          selection\n          onChange={(e, { value }) => setFilter({ ...filter, [key]: value })}\n          options={values.map(value => ({ key: value, value, text: value }))}\n          value={filter[key]}\n        />\n      </Segment>\n    ))}\n  </>\n);\n\nexport default Sidebar;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Dimmer,\n  Grid,\n  Header,\n  Icon,\n  Loader,\n  Message,\n  Segment,\n} from 'semantic-ui-react';\nimport { timeout } from 'promise-more';\n\nimport parseData from './parseData';\nimport Chart from './Chart';\nimport Sidebar from './Sidebar';\n\nimport 'semantic-ui-css/semantic.min.css';\n\nconst dataUrl = '//adverity-challenge.s3-website-eu-west-1.amazonaws.com/DAMKBAoDBwoDBAkOBAYFCw.csv';\n\nfunction App() {\n  const [model, setModel] = useState();\n  const [error, setError] = useState();\n  const [filter, setFilter] = useState({\n    datasource: ['Facebook Ads'],\n    campaign: ['Like Ads'],\n  });\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await timeout(fetch(dataUrl), 5000);\n        const text = await response.text();\n        setModel(parseData(text));\n      } catch (e) {\n        setError(e);\n        console.error(e);\n      }\n    })();\n  }, []);\n\n  return (\n    <Grid celled container columns={2} stackable>\n      <Dimmer active={!model && !error} inverted>\n        <Loader>Loading</Loader>\n      </Dimmer>\n      <Dimmer active={!!error}>\n        <Icon name=\"bug\" size=\"big\" color=\"red\" />\n        <Message>{String(error)}</Message>\n      </Dimmer>\n      <Grid.Row columns={1}>\n        <Grid.Column>\n          <Header as=\"h2\">Sample data explorer</Header>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row columns={2}>\n        <Grid.Column width={4}>\n          {model && (\n            <Sidebar\n              {...{ model, filter, setFilter }}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={12}>\n          <Segment>\n            {model && (\n              <Chart\n                {...{ model, filter }}\n              />\n            )}\n          </Segment>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}